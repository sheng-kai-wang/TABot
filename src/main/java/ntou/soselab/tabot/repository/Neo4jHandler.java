package ntou.soselab.tabot.repository;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.jayway.jsonpath.JsonPath;
import org.neo4j.driver.*;
import org.neo4j.driver.Record;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Repository;
import org.springframework.stereotype.Service;
import org.yaml.snakeyaml.Yaml;

import java.io.IOException;
import java.io.InputStream;
import java.util.*;

/**
 * Cypher statement for curriculum map related functions,
 * currently java and SE are in the same database.
 */
@Repository
public class Neo4jHandler implements AutoCloseable {

    private String url;
    private String username;
    private String password;
    private Driver driver;

    private String cypherDataPath;
    private Map<String, String> cypherData;
    private Gson gson;

    /**
     * It's the constructor,
     * and "cypher" statement is come from cypher.yml.
     */
    @Autowired
    public Neo4jHandler(Environment env) {
        this.url = env.getProperty("neo4j.database.url");
        this.username = env.getProperty("neo4j.database.username");
        this.password = env.getProperty("neo4j.database.password");
        this.cypherDataPath = env.getProperty("neo4j.cypher-data.path");
        this.driver = GraphDatabase.driver(url, AuthTokens.basic(username, password));

        InputStream cypherInputStream = getClass().getResourceAsStream(cypherDataPath);
        this.cypherData = new Yaml().load(cypherInputStream);
        try {
            assert cypherInputStream != null;
            cypherInputStream.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

        this.gson = new GsonBuilder().disableHtmlEscaping().create();
    }

    /**
     * Used to close the driver of neo4j.
     */
    @Override
    public void close() {
        driver.close();
    }

    /**
     * Called by the following other functions.
     *
     * @param cypherString for do something on neo4f.
     * @return Get the returned data from neo4j.
     */
    public List<String> doCypher(final String cypherString) {
        try (Session session = driver.session()) {
            List<String> response = session.writeTransaction((Transaction tx) -> {
                List<String> dataList = new ArrayList<>();
                final Result result = tx.run(cypherString);
                while (result.hasNext()) {
                    Record record = result.next();
                    dataList.add(gson.toJson(record));
                }
                return dataList;
            });
            return response;
        }
    }

    /**
     * read curriculum map content.
     *
     * @param queryName the Chapter or Section name of curriculum map you want to read.
     * @return Use JSON string to describe the list of Chapter or Section.
     */
    public String readCurriculumMap(String queryName) {
        String cypherString = cypherData.get("read-curriculum-map").replace("<<queryName>>", queryName);
        List<String> cypherResponses = doCypher(cypherString);
        Set<String> results = new HashSet<>();
        for (String cypherResponse : cypherResponses) {
            results.add(JsonPath.read(cypherResponse, "$.values[0].adapted.properties.name.val"));
        }
        return gson.toJson(results);
    }

    /**
     * read the slideshow of curriculum map.
     *
     * @param queryName the Chapter or Section name of curriculum map you want to read.
     * @return the URL of the slideshow.
     */
    public String readSlideshowByName(String queryName) {
        String cypherString = cypherData.get("read-slideshow-by-name").replace("<<queryName>>", queryName);
        String response = "[]";
        try {
            response = JsonPath.read(doCypher(cypherString).get(0), "$.values[0].val");
        } catch (Exception e) {
            e.printStackTrace();
        }
        return response;
    }

    /**
     * read the slideshow of curriculum map.
     *
     * @param chapterId the Chapter id of curriculum map you want to read.
     *                  NOT the identity automatically generated by neo4j
     * @return the URL of the slideshow.
     */
    public String readSlideshowById(int chapterId) {
        String cypherString = cypherData.get("read-slideshow-by-id").replace("<<chapterId>>", String.valueOf(chapterId));
        List<String> cypherResponses = doCypher(cypherString);
        return JsonPath.read(cypherResponses.get(0), "$.values[0].val");
    }

    /**
     * add reference of Section in curriculum map.
     *
     * @param sectionName   the Section name of curriculum map you want to add data.
     * @param referenceName the reference's name you want to add.
     * @param referenceURL  the reference's URL you want to add.
     */
    public void addReference(String sectionName, String referenceName, String referenceURL, String referenceRemark) {
        String cypherString = cypherData.get("add-reference")
                .replace("<<sectionName>>", sectionName)
                .replace("<<referenceName>>", referenceName)
                .replace("<<referenceURL>>", referenceURL)
                .replace("<<referenceRemark>>", referenceRemark);
        doCypher(cypherString);
    }

    /**
     * read personalized test of the curriculum map.
     *
     * @param studentId is in the Google sheets and Firebase.
     * @return the test belonging to weakness.
     */
    public String readPersonalizedExam(String studentId) {
        String cypherString = cypherData.get("read-personalized-exam").replace("<<studentId>>", studentId);
        List<String> cypherResponses = doCypher(cypherString);
        List<String> results = new ArrayList<>();
        for (String cypherResponse : cypherResponses) {
            results.add(JsonPath.read(cypherResponse, "$.values[0].adapted.properties.number.val"));
        }
        return gson.toJson(results);
    }

    /**
     * read personalized subject matter of the curriculum map.
     *
     * @param studentId is in the Google sheets and Firebase.
     * @return the Section belonging to weakness.
     */
    public String readPersonalizedSubjectMatter(String studentId) {
        String cypherString = cypherData.get("read-personalized-subject-matter").replace("<<studentId>>", studentId);
        List<String> cypherResponses = doCypher(cypherString);
        Set<String> results = new HashSet<>();
        for (String cypherResponse : cypherResponses) {
            results.add(JsonPath.read(cypherResponse, "$.values[0].val"));
            results.add(JsonPath.read(cypherResponse, "$.values[1].val"));
        }
        return gson.toJson(results);
    }

    /**
     * update student, exam node, and their relationship
     *
     * @param studentId   like "00457122"
     * @param studentName like "劉士辰"
     * @param examId      like "12", it's the exam number on Google sheets.
     */
    public void updatePersonalizedExam(String studentId, String studentName, String examId) {
        String cypherString = cypherData.get("update-personalized-exam")
                .replace("<<studentId>>", studentId)
                .replace("<<studentName>>", studentName)
                .replace("<<examId>>", examId);
        doCypher(cypherString);
    }

    /**
     * (overload) update student, exam node, and their relationship
     * student who absented all exam.
     *
     * @param studentId like "00457122"
     * @param examId    like "12", it's the exam number common to all student on Google sheets.
     */
    public void updatePersonalizedExam(String studentId, String examId) {
        String cypherString = cypherData.get("update-personalized-exam-common")
                .replace("<<studentId>>", studentId)
                .replace("<<examId>>", examId);
        doCypher(cypherString);
    }
}